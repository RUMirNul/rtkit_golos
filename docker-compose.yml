version: "3.4"
services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 45s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      backend: { aliases: [rabbitmq.backend] }
    restart: unless-stopped

  postgres:
    container_name: postgres_container
    image: postgres:latest
    environment:
      netstat: host
      POSTGRES_USER: golos
      POSTGRES_PASSWORD: golosgolos
      POSTGRES_DB: golos
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - postgres-db-data:/var/lib/postgresql/data
    ports:
      - "6432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "golosbd", "-U", "postgres" ]
      interval: 45s
      timeout: 30s
      retries: 10
      start_period: 30s
    networks:
      backend: { aliases: [ postgres.backend ] }
    restart: always

  golos:
    image: golos:latest
    container_name: golos
    build:
      context: ./golos
      dockerfile: Dockerfile
      args:
        APP_NAME: golos
        APP_VERSION: 0.0.1
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
    networks:
      backend: { aliases: [ golos.backend ] }

  notifier:
    image: notifier:latest
    container_name: notifier
    build:
      dockerfile: Dockerfile
      context: ./notifier
      args:
        APP_NAME: notifier
        APP_VERSION: 0.0.1
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: 158.160.150.41
    networks:
      backend: { aliases: [ notifier.backend ] }

  statistics:
    image: statistics:latest
    container_name: statistics
    build:
      dockerfile: Dockerfile
      context: ./statistics
      args:
        APP_NAME: statistics
        APP_VERSION: 0.0.1
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: 158.160.150.41
    networks:
      backend: { aliases: [ statistics.backend ] }

networks:
  backend:
    driver: bridge

volumes:
  postgres-db-data: